#!/usr/bin/env python
"""Helper class to iterate over 3-channel event traces in h5 file generated by rf library,
   without loading all the traces into memory. This is a scalable solution for very large files.
"""

import h5py
from obspyh5 import dataset2trace
from rf import RFStream

class IterRfH5FileEvents(object):

    def __init__(self, h5_filename):
        self.h5_filename = h5_filename
        self.num_components = 3

    def __len__(self):
        assert False, 'NYI'
        return 0

    def __iter__(self):
        with h5py.File(self.h5_filename, 'r') as f:
            wf_data = f['waveforms']
            for station_id in wf_data:
                station_data = wf_data[station_id]
                for event_time in station_data:
                    event_traces = station_data[event_time]
                    if len(event_traces) != self.num_components:
                        continue
                    traces = []
                    for trace_id in event_traces:
                        trace = dataset2trace(event_traces[trace_id])
                        traces.append(trace)
                    stream = RFStream(traces=traces).sort()
                    yield stream
