#!/usr/bin/env python

import os

from seismic.inventory import engd2stxml
from seismic.inventory.engd2stxml import rt_timestamp


def test_engd2stxml_main(iris_mocker, tmp_path):
    """Test main entry point for STN file conversion

    :param iris_mocker: Automatic fixture object passed by pytest which duck types requests
    :type iris_mocker: tests.mocks.inventory.mock_fdsn_xml.MockIrisResponse
    :param tmp_path: Path in which to store output files, auto-generated by pytest
    :type tmp_path: str or pathlib.Path
    """
    assert not os.path.exists(os.path.join(str(tmp_path), "INVENTORY_" + rt_timestamp + ".xml"))
    self_path = os.path.dirname(os.path.abspath(__file__))
    test_data_path = os.path.join(self_path, 'data')
    stations_folder = os.path.join(test_data_path, 'stations')
    expected_query = "https://service.iris.edu/fdsnws/station/1/query?net=GE&sta=*&cha=*HZ&level=response" \
                        "&format=xml&includerestricted=false&includecomments=false&nodata=404"
    iris_mocker.get(expected_query, text=iris_mocker.get_minimal_response())
    engd2stxml.main(os.path.join(test_data_path, "IRIS-ALL_tiny.xml"),
                    stations_folder, str(tmp_path), test_mode=True)
    assert not os.path.exists(os.path.join(test_data_path, "IRIS-ALL_tiny.pkl"))
    assert os.path.exists(os.path.join(str(tmp_path), "INVENTORY_" + rt_timestamp + ".xml"))

# TODO: Add additional test functions that:
#   * test individual functions from engd2stxml module
#   * test the correctness of the content in the output INVENTORY_*.xml file


if __name__ == "__main__":
    import tempfile
    from tests.mocks.inventory.mock_fdsn_xml import MockIrisResponse
    mock = MockIrisResponse()
    mock.start()
    test_engd2stxml_main(mock, tempfile.mkdtemp())
