#!/usr/bin/env python

import os
import requests
import requests_mock

from obspy import read_inventory

from seismic.inventory import update_iris_inventory, iris_query


def test_update_iris_inv_exception(iris_mocker):
    """Test handling of RequestException in update_iris_station_xml()
    """
    # Force RequestException to be thrown (and caught)
    iris_mocker.get(requests_mock.ANY, exc=requests.exceptions.RequestException)
    update_iris_inventory.update_iris_station_xml(requests, '')


def test_update_iris_inv(iris_mocker, tmp_path):
    """Test generation of station xml file from requests GET query, using known
       data errors encountered in real-world IRIS queries.

    :param tmp_path: Path in which temporary files can be created, auto-generated by pytest.
    :type tmp_path: pathlib2.Path
    """
    # List of illegal data strings to inject into test response XML
    ILLEGAL_ELEMENTS = [  # pylint: disable=invalid-name
        r"<Azimuth>360.1</Azimuth>",
        r"<Azimuth>362.0</Azimuth>",
        r"<Azimuth>370</Azimuth>",
        r"<Azimuth>-90</Azimuth>",
        r"<Latitude>-90.878944</Latitude>"
    ]
    default_channel_query = iris_query.form_channel_request_url()
    # Loop over error strings at test each in the same way
    for known_error in ILLEGAL_ELEMENTS:
        if "<Azimuth>" in known_error:
            response = iris_mocker.get_minimal_response().replace("<Azimuth>0</Azimuth>", known_error)
        elif "<Latitude>" in known_error:
            response = iris_mocker.get_minimal_response().replace("<Latitude>39.895901</Latitude>", known_error)
        else:
            assert False, "Unhandled error case"
        # Set response containing erroneous data
        iris_mocker.get(default_channel_query, text=response)
        # Generate IRIS station XML file
        outfile = os.path.join(str(tmp_path), 'junk.xml')
        update_iris_inventory.update_iris_station_xml(requests, outfile)
        assert os.path.exists(outfile)
        # Read file to check that the illegal data is not found in it
        with open(outfile, 'r') as f:
            file_text = f.read()
            assert known_error not in file_text
        # Re-read inventory file to check validity
        test_inv = read_inventory(outfile)
        assert len(test_inv.networks) == 1
        assert test_inv.networks[0].code == 'GE'
        assert len(test_inv.networks[0].stations) == 1
        assert test_inv.networks[0].stations[0].code == 'MAHO'
        assert len(test_inv.networks[0].stations[0].channels) == 1
        assert test_inv.networks[0].stations[0].channels[0].code == 'BHZ'
        # Clean up so we accidentally re-use wrong file in subsequent loop
        os.remove(outfile)
        assert not os.path.exists(outfile)
